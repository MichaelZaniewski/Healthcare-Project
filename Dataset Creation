#Creating the Dataset
The dataset is comprised of three tables: Patient Information, Visit Information, and Billing Information.
All data is generated.



Generation Process:
ChatGPT was used to generate the python script that subsequently generated the dataset.

I designed this synthetic healthcare dataset with ChatGPT as a co-pilot: we debated realistic clinical, operational, and billing rules, then translated them into a single Python generator that produces linked patients, visits, and billing tables plus a validation summary. We separated treatment from medication (with life-like drug names, doses, and frequencies), modeled follow-ups and “Monitoring” (including a small no-show rate for minor conditions), tightened provider continuity (same doctor/hospital preferred; otherwise same hospital or at least same state), and made same-day discharges more common only for mild severities with minor conditions. Billing was kept strictly 1:1 with visits, with sensible coverage and charge behavior, and we moved billing_date into the billing table where it belongs.



python M:\PROJECT\healthcare_dataset_generator_v12.py --patients 50000 --validate --outdir M:\PROJECT\healthcare_v12out --export-prefix healthcare_v12


The Healthcare Dataset Generator is the engine behind this project’s analytics. It programmatically creates a large, realistic U.S.-based healthcare dataset that mirrors the complexity of real hospital systems — while containing no real or sensitive data. Each run produces unique, randomized data built on controlled logic, meaning no two datasets are ever the same.


1. Multi-table Relational Design
- Patients, Visits, and Billing tables mirror an actual healthcare database schema.
- Built with consistent primary and foreign keys for seamless SQL joins and BI analysis.

2. Realistic Patient Demographics
- Generates authentic U.S. names (with prefixes), phone numbers, and addresses.
- Includes realistic age distributions, gender alignment, and insurance coverage rates (≈78% insured).
- Insurance provider list drawn from thousands of unique company names.

3. Condition and Treatment Logic
- Over 17 medical conditions with realistic severity levels and age restrictions.
- Severity progression and recurrence follow natural clinical patterns — e.g. chronic conditions like diabetes have multiple visits, while acute ones like flu resolve quickly.
- Pediatric gating prevents impossible pairings (e.g. children with heart disease).
- Follow-up visits retain the same doctor and hospital to simulate continuity of care.

4. Dynamic Visit and LOS Behavior
- Visit counts vary by condition and severity (1–18 possible visits per patient).
- Realistic length of stay (LOS) logic based on condition complexity.
- Includes probabilistic same-day discharges for mild or minor conditions, tunable per dataset.

5. Realistic Billing System
- Each visit generates one billing record with total charges, insurance coverage, and patient responsibility.
- Payment plans (Full or Incremental) influence expected and actual payment timelines.
- Deterministic payment status rules produce Paid, Late-Paid, In-progress, or Late-Unpaid outcomes.
- Follow-up visits are billed less than the initial visit to reflect patient recovery — with small random “bumps” for realism.

6. Controlled Randomness
- Every run uses seeded randomization for reproducibility — but built-in stochastic variation ensures no two datasets are identical.
- Hospital profiles, doctor behavior, billing bias, and severity patterns all vary subtly between runs.

7. Built-in Validation Framework
- Automatic validation checks ensure internal consistency before export:
- No missing foreign keys.
- Logical LOS and age alignment.
- Insurance-policy integrity.
- Proper follow-up scaling and doctor/hospital consistency.
- No future or invalid dates.
